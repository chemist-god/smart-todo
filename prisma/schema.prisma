// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth.js relations
  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]

  // App relations
  todos         Todo[]
  notes         Note[]
  achievements  UserAchievement[]
  stats         UserStats?
  goals         Goal[]
  
  // SmartStake relations
  wallet        UserWallet?
  stakes        Stake[]
  rewards       Reward[]
  penalties     Penalty[]
  transactions  WalletTransaction[]
  invitations   StakeInvitation[] @relation("StakeInvitations")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id                 String  @id @default(cuid())
  credentialID       String  @unique @db.Text
  userId             String
  publicKey          String  @db.Text
  counter            BigInt
  transports         String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([credentialID, userId])
}

// App Models
model Todo {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  dueDate     DateTime?
  priority    Priority  @default(MEDIUM)
  points      Int       @default(10)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  // Enhanced Scheduling & Timer Fields
  scheduledStartTime DateTime?     // When the task should start
  scheduledEndTime   DateTime?     // When the task should end
  estimatedDuration  Int?          // Estimated duration in minutes
  actualDuration     Int?          // Actual time spent in minutes
  timeZone          String?        // User's timezone (e.g., "America/New_York")
  
  // Timer & Focus Features
  timerStatus       TimerStatus    @default(STOPPED)
  timerStartTime    DateTime?      // When timer was last started
  totalTimeSpent    Int            @default(0) // Total time spent in minutes
  focusMode         Boolean        @default(false) // Focus mode enabled
  
  // Recurring & Reminders
  isRecurring       Boolean        @default(false)
  recurrencePattern RecurrencePattern?
  reminderSettings  Json?          // Flexible reminder configuration
  
  // Pomodoro Integration
  pomodoroSessions  Int            @default(0) // Number of pomodoro sessions
  breakDuration     Int?           // Break duration in minutes
  
  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  timerSessions TimerSession[]

  @@index([userId])
  @@index([completed])
  @@index([dueDate])
  @@index([scheduledStartTime])
  @@index([scheduledEndTime])
  @@index([timerStatus])
  @@index([isRecurring])
}

// Timer Session Tracking
model TimerSession {
  id          String    @id @default(cuid())
  todoId      String
  todo        Todo      @relation(fields: [todoId], references: [id], onDelete: Cascade)
  
  startTime   DateTime
  endTime     DateTime?
  duration    Int?      // Duration in minutes
  sessionType TimerSessionType @default(FOCUS)
  notes       String?   // Optional session notes
  
  createdAt   DateTime  @default(now())
  
  @@index([todoId])
  @@index([startTime])
  @@index([sessionType])
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  type      NoteType @default(GENERAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  points      Int
  type        AchievementType
  requirement Int      @default(1)
  createdAt   DateTime @default(now())

  // Relations
  userAchievements UserAchievement[]
}

model UserAchievement {
  id           String      @id @default(cuid())
  unlockedAt   DateTime    @default(now())
  progress     Int         @default(0)

  // Relations
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement  Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
}

model UserStats {
  id                String   @id @default(cuid())
  totalPoints       Int      @default(0)
  level             Int      @default(1)
  currentStreak     Int      @default(0)
  longestStreak     Int      @default(0)
  todosCompleted    Int      @default(0)
  notesCreated      Int      @default(0)
  achievementsUnlocked Int   @default(0)
  lastActiveDate    DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TimerStatus {
  STOPPED
  RUNNING
  PAUSED
  COMPLETED
}

enum TimerSessionType {
  FOCUS
  BREAK
  POMODORO
  DEEP_WORK
  REVIEW
}

enum RecurrencePattern {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum NoteType {
  GENERAL
  BIBLE_STUDY
  CONFERENCE
  SONG
  QUOTE
  REFLECTION
}

enum AchievementType {
  TODO
  NOTE
  STREAK
  POINTS
  SPECIAL
}

// Goal tracking models
model Goal {
  id          String      @id @default(cuid())
  title       String
  description String?
  type        GoalType
  target      Int         // Target value (e.g., number of tasks, points, etc.)
  current     Int         @default(0) // Current progress
  unit        String      // Unit of measurement (e.g., "tasks", "points", "days")
  startDate   DateTime
  endDate     DateTime?
  isCompleted Boolean     @default(false)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones  Milestone[]

  @@index([userId])
  @@index([isActive])
  @@index([type])
}

model Milestone {
  id          String   @id @default(cuid())
  title       String
  description String?
  target      Int
  current     Int      @default(0)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  goalId      String
  goal        Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@index([goalId])
}

enum GoalType {
  TASKS_COMPLETED
  POINTS_EARNED
  STREAK_DAYS
  NOTES_CREATED
  ACHIEVEMENTS_UNLOCKED
  CUSTOM
}

// SmartStake Models
model Stake {
  id              String      @id @default(cuid())
  title           String
  description     String?
  stakeType       StakeType
  status          StakeStatus @default(ACTIVE)
  
  // Categorization & Difficulty
  category        String?     // e.g., "fitness", "work", "learning", "personal"
  difficulty      String?     // e.g., "easy", "medium", "hard", "extreme"
  tags            String[]    // Array of tags for better categorization
  
  // Popularity & Engagement
  popularity      Int         @default(0) // Calculated based on views, joins, shares
  viewCount       Int         @default(0)
  joinCount       Int         @default(0)
  shareCount      Int         @default(0)
  
  // Financial Details
  totalAmount     Decimal     @db.Decimal(10, 2)
  userStake       Decimal     @db.Decimal(10, 2)
  friendStakes    Decimal     @default(0) @db.Decimal(10, 2)
  penaltyAmount   Decimal     @default(0) @db.Decimal(10, 2)
  
  // Task Details
  taskId          String?
  deadline        DateTime
  completionProof String?     @db.Text
  
  // Rewards & Penalties
  rewardAmount    Decimal     @default(0) @db.Decimal(10, 2)
  penaltyPool     Decimal     @default(0) @db.Decimal(10, 2)
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  completedAt     DateTime?
  
  // Relations
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  participants    StakeParticipant[]
  rewards         Reward[]
  penalties       Penalty[]
  invitations     StakeInvitation[]
  
  @@index([userId])
  @@index([status])
  @@index([stakeType])
  @@index([deadline])
  @@index([category])
  @@index([difficulty])
  @@index([popularity])
}

model StakeParticipant {
  id              String      @id @default(cuid())
  stakeId         String
  stake           Stake       @relation(fields: [stakeId], references: [id], onDelete: Cascade)
  
  participantId   String
  participantName String
  amount          Decimal     @db.Decimal(10, 2)
  isSupporter     Boolean     @default(true)
  
  joinedAt        DateTime    @default(now())
  
  @@index([stakeId])
  @@index([participantId])
}

model Reward {
  id              String      @id @default(cuid())
  stakeId         String
  stake           Stake       @relation(fields: [stakeId], references: [id], onDelete: Cascade)
  
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Decimal     @db.Decimal(10, 2)
  rewardType      RewardType
  description     String?
  
  awardedAt       DateTime    @default(now())
  
  @@index([userId])
  @@index([stakeId])
}

model Penalty {
  id              String      @id @default(cuid())
  stakeId         String
  stake           Stake       @relation(fields: [stakeId], references: [id], onDelete: Cascade)
  
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Decimal     @db.Decimal(10, 2)
  reason          String
  
  appliedAt       DateTime    @default(now())
  
  @@index([userId])
  @@index([stakeId])
}

model UserWallet {
  id              String      @id @default(cuid())
  userId          String      @unique
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  balance         Decimal     @default(0) @db.Decimal(10, 2)
  totalEarned     Decimal     @default(0) @db.Decimal(10, 2)
  totalLost       Decimal     @default(0) @db.Decimal(10, 2)
  totalStaked     Decimal     @default(0) @db.Decimal(10, 2)
  
  // Advanced Metrics
  completionRate  Decimal     @default(0) @db.Decimal(5, 2)
  currentStreak   Int         @default(0)
  longestStreak   Int         @default(0)
  rank            Int         @default(0)
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  transactions    WalletTransaction[]
  
  @@index([userId])
  @@index([rank])
  @@index([completionRate])
}

model WalletTransaction {
  id              String      @id @default(cuid())
  walletId        String
  wallet          UserWallet  @relation(fields: [walletId], references: [id], onDelete: Cascade)
  
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type            String
  amount          Decimal     @db.Decimal(10, 2)
  description     String
  referenceId     String?
  
  createdAt       DateTime    @default(now())
  
  @@index([walletId])
  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

// SmartStake Enums
enum StakeType {
  SELF_STAKE
  SOCIAL_STAKE
  CHALLENGE_STAKE
  TEAM_STAKE
  CHARITY_STAKE
}

enum StakeStatus {
  ACTIVE
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
  DISPUTED
}

enum RewardType {
  SELF_REWARD
  POOL_REWARD
  PENALTY_REWARD
  FRIEND_REWARD
  STREAK_BONUS
  ACHIEVEMENT_BONUS
  COMPLETION
  SUPPORT
  REFUND
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

model StakeInvitation {
  id            String           @id @default(cuid())
  stakeId       String
  inviterId     String
  inviteeEmail  String
  message       String?
  status        InvitationStatus @default(PENDING)
  securityCode  String           @unique
  createdAt     DateTime         @default(now())
  expiresAt     DateTime
  acceptedAt    DateTime?
  lastViewedAt  DateTime?
  viewCount     Int              @default(0)
  
  stake         Stake @relation(fields: [stakeId], references: [id], onDelete: Cascade)
  inviter       User  @relation("StakeInvitations", fields: [inviterId], references: [id], onDelete: Cascade)
  
  @@index([inviteeEmail])
  @@index([stakeId])
  @@index([status])
  @@index([securityCode])
}