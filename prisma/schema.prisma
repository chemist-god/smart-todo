generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String              @id @default(cuid())
  name           String?
  email          String?             @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  accounts       Account[]
  authenticators Authenticator[]
  goals          Goal[]
  notes          Note[]
  penalties      Penalty[]
  rewards        Reward[]
  sessions       Session[]
  stakes         Stake[]
  invitations    StakeInvitation[]   @relation("StakeInvitations")
  todos          Todo[]
  achievements   UserAchievement[]
  stats          UserStats?
  wallet         UserWallet?
  transactions   WalletTransaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id           String  @id @default(cuid())
  credentialID String  @unique
  userId       String
  publicKey    String
  counter      BigInt
  transports   String?
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([credentialID, userId])
}

model Todo {
  id                 String             @id @default(cuid())
  title              String
  description        String?
  completed          Boolean            @default(false)
  dueDate            DateTime?
  priority           Priority           @default(MEDIUM)
  points             Int                @default(10)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  completedAt        DateTime?
  userId             String
  actualDuration     Int?
  breakDuration      Int?
  estimatedDuration  Int?
  focusMode          Boolean            @default(false)
  isRecurring        Boolean            @default(false)
  pomodoroSessions   Int                @default(0)
  recurrencePattern  RecurrencePattern?
  reminderSettings   Json?
  scheduledEndTime   DateTime?
  scheduledStartTime DateTime?
  timeZone           String?
  timerStartTime     DateTime?
  timerStatus        TimerStatus        @default(STOPPED)
  totalTimeSpent     Int                @default(0)
  timerSessions      TimerSession[]
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([completed])
  @@index([dueDate])
  @@index([scheduledStartTime])
  @@index([scheduledEndTime])
  @@index([timerStatus])
  @@index([isRecurring])
}

model TimerSession {
  id          String           @id @default(cuid())
  todoId      String
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  sessionType TimerSessionType @default(FOCUS)
  notes       String?
  createdAt   DateTime         @default(now())
  todo        Todo             @relation(fields: [todoId], references: [id], onDelete: Cascade)

  @@index([todoId])
  @@index([startTime])
  @@index([sessionType])
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  type      NoteType @default(GENERAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

model Achievement {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String
  points           Int
  type             AchievementType
  requirement      Int               @default(1)
  createdAt        DateTime          @default(now())
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  unlockedAt    DateTime    @default(now())
  progress      Int         @default(0)
  userId        String
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
}

model UserStats {
  id                   String   @id @default(cuid())
  totalPoints          Int      @default(0)
  level                Int      @default(1)
  currentStreak        Int      @default(0)
  longestStreak        Int      @default(0)
  todosCompleted       Int      @default(0)
  notesCreated         Int      @default(0)
  achievementsUnlocked Int      @default(0)
  lastActiveDate       DateTime @default(now())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id          String      @id @default(cuid())
  title       String
  description String?
  type        GoalType
  target      Int
  current     Int         @default(0)
  unit        String
  startDate   DateTime
  endDate     DateTime?
  isCompleted Boolean     @default(false)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones  Milestone[]

  @@index([userId])
  @@index([isActive])
  @@index([type])
}

model Milestone {
  id          String   @id @default(cuid())
  title       String
  description String?
  target      Int
  current     Int      @default(0)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  goalId      String
  goal        Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@index([goalId])
}

model Stake {
  id              String             @id @default(cuid())
  title           String
  description     String?
  stakeType       StakeType
  status          StakeStatus        @default(ACTIVE)
  category        String?
  difficulty      String?
  tags            String[]
  popularity      Int                @default(0)
  viewCount       Int                @default(0)
  joinCount       Int                @default(0)
  shareCount      Int                @default(0)
  totalAmount     Decimal            @db.Decimal(10, 2)
  userStake       Decimal            @db.Decimal(10, 2)
  friendStakes    Decimal            @default(0) @db.Decimal(10, 2)
  penaltyAmount   Decimal            @default(0) @db.Decimal(10, 2)
  taskId          String?
  deadline        DateTime
  completionProof String?
  rewardAmount    Decimal            @default(0) @db.Decimal(10, 2)
  penaltyPool     Decimal            @default(0) @db.Decimal(10, 2)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  completedAt     DateTime?
  userId          String
  penalties       Penalty[]
  rewards         Reward[]
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitations     StakeInvitation[]
  participants    StakeParticipant[]

  @@index([userId])
  @@index([status])
  @@index([stakeType])
  @@index([deadline])
  @@index([category])
  @@index([difficulty])
  @@index([popularity])
}

model StakeParticipant {
  id              String   @id @default(cuid())
  stakeId         String
  participantId   String
  participantName String
  amount          Decimal  @db.Decimal(10, 2)
  isSupporter     Boolean  @default(true)
  joinedAt        DateTime @default(now())
  stake           Stake    @relation(fields: [stakeId], references: [id], onDelete: Cascade)

  @@index([stakeId])
  @@index([participantId])
}

model Reward {
  id          String     @id @default(cuid())
  stakeId     String
  userId      String
  amount      Decimal    @db.Decimal(10, 2)
  rewardType  RewardType
  description String?
  awardedAt   DateTime   @default(now())
  stake       Stake      @relation(fields: [stakeId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stakeId])
}

model Penalty {
  id        String   @id @default(cuid())
  stakeId   String
  userId    String
  amount    Decimal  @db.Decimal(10, 2)
  reason    String
  appliedAt DateTime @default(now())
  stake     Stake    @relation(fields: [stakeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stakeId])
}

model UserWallet {
  id             String              @id @default(cuid())
  userId         String              @unique
  balance        Decimal             @default(0) @db.Decimal(10, 2)
  totalEarned    Decimal             @default(0) @db.Decimal(10, 2)
  totalLost      Decimal             @default(0) @db.Decimal(10, 2)
  totalStaked    Decimal             @default(0) @db.Decimal(10, 2)
  completionRate Decimal             @default(0) @db.Decimal(5, 2)
  currentStreak  Int                 @default(0)
  longestStreak  Int                 @default(0)
  rank           Int                 @default(0)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions   WalletTransaction[]

  @@index([userId])
  @@index([rank])
  @@index([completionRate])
}

model WalletTransaction {
  id          String     @id @default(cuid())
  walletId    String
  userId      String
  type        String
  amount      Decimal    @db.Decimal(10, 2)
  description String
  referenceId String?
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet      UserWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model StakeInvitation {
  id           String           @id @default(cuid())
  stakeId      String
  inviterId    String
  inviteeEmail String
  message      String?
  status       InvitationStatus @default(PENDING)
  securityCode String           @unique
  createdAt    DateTime         @default(now())
  expiresAt    DateTime
  acceptedAt   DateTime?
  lastViewedAt DateTime?
  viewCount    Int              @default(0)
  inviter      User             @relation("StakeInvitations", fields: [inviterId], references: [id], onDelete: Cascade)
  stake        Stake            @relation(fields: [stakeId], references: [id], onDelete: Cascade)

  @@index([inviteeEmail])
  @@index([stakeId])
  @@index([status])
  @@index([securityCode])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TimerStatus {
  STOPPED
  RUNNING
  PAUSED
  COMPLETED
}

enum TimerSessionType {
  FOCUS
  BREAK
  POMODORO
  DEEP_WORK
  REVIEW
}

enum RecurrencePattern {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum NoteType {
  GENERAL
  BIBLE_STUDY
  CONFERENCE
  SONG
  QUOTE
  REFLECTION
}

enum AchievementType {
  TODO
  NOTE
  STREAK
  POINTS
  SPECIAL
}

enum GoalType {
  TASKS_COMPLETED
  POINTS_EARNED
  STREAK_DAYS
  NOTES_CREATED
  ACHIEVEMENTS_UNLOCKED
  CUSTOM
}

enum StakeType {
  SELF_STAKE
  SOCIAL_STAKE
  CHALLENGE_STAKE
  TEAM_STAKE
  CHARITY_STAKE
}

enum StakeStatus {
  ACTIVE
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
  DISPUTED
}

enum RewardType {
  SELF_REWARD
  POOL_REWARD
  PENALTY_REWARD
  FRIEND_REWARD
  STREAK_BONUS
  ACHIEVEMENT_BONUS
  COMPLETION
  SUPPORT
  REFUND
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}
