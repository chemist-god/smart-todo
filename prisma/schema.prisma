datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]
  todos         Todo[]
  notes         Note[]
  points        Int       @default(0)
  achievements  Achievement[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Todo {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  dueDate     DateTime?
  priority    Priority  @default(MEDIUM)
  points      Int       @default(1)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  categories  Category[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Note {
  id          String    @id @default(cuid())
  title       String
  content     String
  type        NoteType  @default(GENERAL)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  categories  Category[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  name      String
  todos     Todo[]
  notes     Note[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Achievement {
  id          String    @id @default(cuid())
  name        String
  description String
  points      Int
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  unlockedAt  DateTime  @default(now())
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum NoteType {
  GENERAL
  BIBLE_STUDY
  CONFERENCE
  SONG
  QUOTE
  REFLECTION
}

/// Auth.js (NextAuth) Prisma Adapter models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String @id
  userId               String
  provider             String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId, credentialID])
}
